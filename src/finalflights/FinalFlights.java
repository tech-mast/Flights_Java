
package finalflights;

//import java.awt.List;
import com.opencsv.CSVWriter;
import java.awt.BorderLayout;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

public class FinalFlights extends javax.swing.JFrame {

    DefaultListModel<Flight> flightListModel = new DefaultListModel<>();
    DefaultComboBoxModel<Flight.Type> typeListModel = new DefaultComboBoxModel<Flight.Type>();
    Database db;
    Flight currentEditedFlight = null;
    
    public FinalFlights() throws InvalidDataException {
        try {
            initComponents();
            fileChooserCsv.setFileFilter(new FileNameExtensionFilter("CSV files (*.csv)", "csv"));
            db = new Database();
            reloadFromDatabase();       //  ex InvalidDataException
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failed to connect" + ex.getMessage(),
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    
     private void reloadFromDatabase() throws InvalidDataException {
        try {
            ArrayList<Flight> list = db.getAllFlights();     // ex InvalidDataException
            Flight.Type[] typeList = Flight.Type.values();
            
            flightListModel.clear();
            for (Flight flight : list) {
                flightListModel.addElement(flight);
            }
            typeListModel.removeAllElements();
            for (Flight.Type type : typeList) {
                typeListModel.addElement(type);
            }
            int index= flightListModel.getSize();
            lblStatus.setText("Total Flight: " + index+"");
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Failed to fetch records: " + ex.getMessage(),
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dlgAddEdit = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dlgAddEdit_lblId = new javax.swing.JLabel();
        dlgAddEdit_tfDate = new javax.swing.JTextField();
        dlgAddEdit_btCancel = new javax.swing.JButton();
        dlgAddEdit_btSave = new javax.swing.JButton();
        dlgAddEdit_tfToCode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dlgAddEdit_tfFromCode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dlgAddEdit_comboType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        dlgAddEdit_lblPassengersNumber = new javax.swing.JLabel();
        dlgAddEdit_sliderPassengers = new javax.swing.JSlider();
        popupMenu = new javax.swing.JPopupMenu();
        miPopupEdit = new javax.swing.JMenuItem();
        miPopupDelete = new javax.swing.JMenuItem();
        fileChooserCsv = new javax.swing.JFileChooser();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFlights = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miFileExportToCsv = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miEditAddFlight = new javax.swing.JMenuItem();

        dlgAddEdit.setResizable(false);

        jLabel2.setText("id:");

        jLabel3.setText("Date: dd-MM-yyyy");

        jLabel4.setText("From Code: ");

        dlgAddEdit_lblId.setText("-");

        dlgAddEdit_btCancel.setText("Cancel");
        dlgAddEdit_btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlgAddEdit_btCancelActionPerformed(evt);
            }
        });

        dlgAddEdit_btSave.setText("Save");
        dlgAddEdit_btSave.setSelected(true);
        dlgAddEdit_btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlgAddEdit_btSaveActionPerformed(evt);
            }
        });

        jLabel5.setText("To Code: ");

        jLabel6.setText("Passengers:  ");

        dlgAddEdit_comboType.setModel(typeListModel);

        jLabel7.setText("Type: ");

        dlgAddEdit_lblPassengersNumber.setText("0");

        dlgAddEdit_sliderPassengers.setMajorTickSpacing(50);
        dlgAddEdit_sliderPassengers.setMaximum(200);
        dlgAddEdit_sliderPassengers.setMinorTickSpacing(10);
        dlgAddEdit_sliderPassengers.setPaintLabels(true);
        dlgAddEdit_sliderPassengers.setPaintTicks(true);
        dlgAddEdit_sliderPassengers.setSnapToTicks(true);
        dlgAddEdit_sliderPassengers.setToolTipText("");
        dlgAddEdit_sliderPassengers.setValue(0);
        dlgAddEdit_sliderPassengers.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlgAddEdit_sliderPassengersStateChanged(evt);
            }
        });

        javax.swing.GroupLayout dlgAddEditLayout = new javax.swing.GroupLayout(dlgAddEdit.getContentPane());
        dlgAddEdit.getContentPane().setLayout(dlgAddEditLayout);
        dlgAddEditLayout.setHorizontalGroup(
            dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgAddEditLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgAddEditLayout.createSequentialGroup()
                        .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dlgAddEditLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dlgAddEdit_lblPassengersNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dlgAddEditLayout.createSequentialGroup()
                                .addComponent(dlgAddEdit_btCancel)
                                .addGap(63, 63, 63)
                                .addComponent(dlgAddEdit_btSave))
                            .addComponent(dlgAddEdit_comboType, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dlgAddEdit_sliderPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(dlgAddEditLayout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(dlgAddEdit_tfToCode, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(dlgAddEditLayout.createSequentialGroup()
                            .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                            .addGap(35, 35, 35)
                            .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dlgAddEdit_tfDate)
                                .addComponent(dlgAddEdit_lblId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(dlgAddEditLayout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(dlgAddEdit_tfFromCode))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        dlgAddEditLayout.setVerticalGroup(
            dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgAddEditLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dlgAddEdit_lblId))
                .addGap(18, 18, 18)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dlgAddEdit_tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dlgAddEdit_tfFromCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dlgAddEdit_tfToCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dlgAddEdit_comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgAddEditLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(dlgAddEdit_lblPassengersNumber))
                        .addGap(115, 115, 115))
                    .addGroup(dlgAddEditLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(dlgAddEdit_sliderPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(dlgAddEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dlgAddEdit_btCancel)
                            .addComponent(dlgAddEdit_btSave))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        popupMenu.setAlignmentX(150.0F);
        popupMenu.setAlignmentY(150.0F);

        miPopupEdit.setText("Edit");
        miPopupEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPopupEditActionPerformed(evt);
            }
        });
        popupMenu.add(miPopupEdit);

        miPopupDelete.setText("Delete");
        miPopupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPopupDeleteActionPerformed(evt);
            }
        });
        popupMenu.add(miPopupDelete);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));

        lblStatus.setText("...");
        lblStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(lblStatus, java.awt.BorderLayout.PAGE_END);

        lstFlights.setModel(flightListModel);
        lstFlights.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstFlightsMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstFlightsMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstFlights);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        miFileExportToCsv.setText("Export selected to *.csv");
        miFileExportToCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miFileExportToCsvActionPerformed(evt);
            }
        });
        jMenu1.add(miFileExportToCsv);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        miEditAddFlight.setText("Add Flight");
        miEditAddFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditAddFlightActionPerformed(evt);
            }
        });
        jMenu2.add(miEditAddFlight);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miFileExportToCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miFileExportToCsvActionPerformed

        List <Flight> list = lstFlights.getSelectedValuesList();

        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select some records first to export them",
                "Data export", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (fileChooserCsv.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File chosenFile = fileChooserCsv.getSelectedFile();
                String chosenFileStr = chosenFile.getCanonicalPath(); // ex
                // Important: append file extension if none was given
                if (!chosenFileStr.matches(".*\\.[^.]{1,10}")) {
                    chosenFileStr += ".csv";
                    chosenFile = new File(chosenFileStr);
                }

                try (Writer writer = new FileWriter(chosenFile); CSVWriter csvWriter = new CSVWriter(writer) ) {
                    String[] headerRecord = {"Id", "On Day", "From Code", "To Code", "Type", "Passengers"};
                    csvWriter.writeNext(headerRecord);
                    for (Flight flight : list) { // FIXME: what exception does writeNext throw ??? catch it !
                        csvWriter.writeNext(new String[]{flight.id + "", flight.onDay+"", flight.fromCode, flight.toCode, flight.type+"", flight.passengers+""});
                    }
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                    "Error writing file:\n" + ex.getMessage(),
                    "File error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_miFileExportToCsvActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miEditAddFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditAddFlightActionPerformed

//        clean inputs
        dlgAddEdit_lblId.setText("-");
        dlgAddEdit_tfDate.setText("00-00-0000");
        dlgAddEdit_lblId.setText("");
        dlgAddEdit_tfFromCode.setText("");
        dlgAddEdit_tfToCode.setText("");
        dlgAddEdit_comboType.setSelectedIndex(0);
        dlgAddEdit_sliderPassengers.setValue(0);
        
        currentEditedFlight = null;

        dlgAddEdit.pack();
        dlgAddEdit.setLocationRelativeTo(this);
        dlgAddEdit.setModal(true);
        dlgAddEdit_btSave.setText("Add Flight");
        dlgAddEdit.setVisible(true);
    }//GEN-LAST:event_miEditAddFlightActionPerformed

    
   private void editUpdate (Flight flight) throws InvalidDataException{
       if (flight == null) {
           return; // do nothing, no selection
       }
       try {
           // fetch full record, including the blob / image

           currentEditedFlight = db.getFlightById(flight.id);       //ex
          
           System.out.println(currentEditedFlight.fromCode);
           
           
           dlgAddEdit_lblId.setText(flight.id+"");
           dlgAddEdit_tfDate.setText(Flight.dateFormatDisplay.format(flight.onDay));
           dlgAddEdit_tfFromCode.setText(flight.fromCode);
           dlgAddEdit_tfToCode.setText(flight.toCode);
           dlgAddEdit_comboType.setSelectedItem(flight.type);
           dlgAddEdit_sliderPassengers.setValue(flight.passengers);

           
           dlgAddEdit.pack();
           dlgAddEdit.setLocationRelativeTo(this);
           dlgAddEdit.setModal(true);
           dlgAddEdit_btSave.setText("Update Flight");
           dlgAddEdit.setVisible(true);

       } catch (SQLException ex) {
           ex.printStackTrace();
           JOptionPane.showMessageDialog(this,
                   "Failed to fetch records: " + ex.getMessage(),
                   "Database error",
                   JOptionPane.ERROR_MESSAGE);
       }
        
   } 
    
 
    
    private void lstFlightsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFlightsMouseClicked

        try {
        if(evt.getClickCount() == 2){
            int index = lstFlights.locationToIndex(evt.getPoint());
            lstFlights.setSelectedIndex(index);
        }else{
            return;
        }
        Flight flightSelected = lstFlights.getSelectedValue();
            editUpdate(flightSelected);
            
        } catch (InvalidDataException ex) {
            Logger.getLogger(FinalFlights.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_lstFlightsMouseClicked

    private void lstFlightsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstFlightsMouseReleased

        if (SwingUtilities.isRightMouseButton(evt)) {
            int row = lstFlights.locationToIndex(evt.getPoint());
            lstFlights.setSelectedIndex(row);

            if (evt.isPopupTrigger()) {
                popupMenu.show(this, evt.getX(), evt.getY());
            }
            popupMenu.setVisible(true);
        }
  

    }//GEN-LAST:event_lstFlightsMouseReleased

    private void dlgAddEdit_btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlgAddEdit_btCancelActionPerformed
        dlgAddEdit.setVisible(false);
    }//GEN-LAST:event_dlgAddEdit_btCancelActionPerformed

    private void dlgAddEdit_btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlgAddEdit_btSaveActionPerformed

        try {

            //            check for errors and collect them
            
            ArrayList<String> errorList = new ArrayList<>();
            Date onDay = Flight.dateFormatDisplay.parse(dlgAddEdit_tfDate.getText()); // ex

            String fromCode = dlgAddEdit_tfFromCode.getText();
            
            String msg;
            if ((msg = Flight.isFromCodeValid(fromCode)) != null) {
                errorList.add(msg);
            }
            
            String toCode = dlgAddEdit_tfToCode.getText();
            
//            String msg;
            if ((msg = Flight.isToCodeValid(toCode)) != null) {
                errorList.add(msg);
            }
            
            Flight.Type type = (Flight.Type) dlgAddEdit_comboType.getSelectedItem();
            
            int passengers = dlgAddEdit_sliderPassengers.getValue();
            
            System.out.println("fecth passenger"+ passengers);
            
            
            if (!errorList.isEmpty()) {
                JOptionPane.showMessageDialog(this, String.join("\n", errorList),
                    "Input Error", JOptionPane.ERROR_MESSAGE);

                return;
            }
            
            if(currentEditedFlight == null){
                Flight flight = new Flight(0, onDay, fromCode,toCode,type,passengers);      //ex InvalidDataException
                db.addFlight(flight);
            } else {
                currentEditedFlight.setOnDay(onDay);
                currentEditedFlight.setFromCode(fromCode);
                currentEditedFlight.setToCode(toCode);
                currentEditedFlight.setType(type);
                currentEditedFlight.setPassengers(passengers);
                 
                System.out.println("this to update"+currentEditedFlight.passengers);
                
                db.updateFlight(currentEditedFlight);
            }
            reloadFromDatabase();
            dlgAddEdit.setVisible(false);

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidDataException ex) {
            Logger.getLogger(FinalFlights.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(FinalFlights.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dlgAddEdit_btSaveActionPerformed

    private void miPopupEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPopupEditActionPerformed

        try {
        Flight flightSelected = lstFlights.getSelectedValue();
            editUpdate(flightSelected);
            
        } catch (InvalidDataException ex) {
            Logger.getLogger(FinalFlights.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_miPopupEditActionPerformed

    private void miPopupDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPopupDeleteActionPerformed

        Flight flight = lstFlights.getSelectedValue();
        if (flight == null) {   // should never happen because we turn buttons on/off
            return;
        } else {
            Object[] options = {"Delete anyway", "Cancel"};
            int result = JOptionPane.showOptionDialog(this,
                "Are you sure you want to delelte the item?\n"
                + "You will delete the data in the database too\n" + flight.toString(),
                "delelte data",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    db.deleteFlight(flight.getId());
                    reloadFromDatabase();   //ex
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Database error",
                        JOptionPane.ERROR_MESSAGE);
                } catch (InvalidDataException ex) {
                    Logger.getLogger(FinalFlights.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_miPopupDeleteActionPerformed

    private void dlgAddEdit_sliderPassengersStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dlgAddEdit_sliderPassengersStateChanged
            int pessangers = dlgAddEdit_sliderPassengers.getValue();
            dlgAddEdit_lblPassengersNumber.setText(pessangers+"");
    }//GEN-LAST:event_dlgAddEdit_sliderPassengersStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalFlights.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalFlights.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalFlights.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalFlights.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FinalFlights().setVisible(true);
                } catch (InvalidDataException ex) {
                    Logger.getLogger(FinalFlights.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog dlgAddEdit;
    private javax.swing.JButton dlgAddEdit_btCancel;
    private javax.swing.JButton dlgAddEdit_btSave;
    private javax.swing.JComboBox<Flight.Type> dlgAddEdit_comboType;
    private javax.swing.JLabel dlgAddEdit_lblId;
    private javax.swing.JLabel dlgAddEdit_lblPassengersNumber;
    private javax.swing.JSlider dlgAddEdit_sliderPassengers;
    private javax.swing.JTextField dlgAddEdit_tfDate;
    private javax.swing.JTextField dlgAddEdit_tfFromCode;
    private javax.swing.JTextField dlgAddEdit_tfToCode;
    private javax.swing.JFileChooser fileChooserCsv;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList<Flight> lstFlights;
    private javax.swing.JMenuItem miEditAddFlight;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miFileExportToCsv;
    private javax.swing.JMenuItem miPopupDelete;
    private javax.swing.JMenuItem miPopupEdit;
    private javax.swing.JPopupMenu popupMenu;
    // End of variables declaration//GEN-END:variables
}
